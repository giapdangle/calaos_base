//Calaos Home Theme
//Copyright 2012 Calaos
//All graphics are copyrighted materials.
//You can't modify/distribute/sell it for any purpose.

group
{
        name: "elm/slider/horizontal/calaos/volume";
        alias: "elm/slider/horizontal/calaos/volume";
        min: 200 200;

        images
        {
                image: "volume_knob.png" COMP;
                image: "volume_knob_move.png" COMP;
                image: "volume_knob_ledsoff.png" COMP;

                image: "volume_led_01.png" COMP;
                image: "volume_led_02.png" COMP;
                image: "volume_led_03.png" COMP;
                image: "volume_led_04.png" COMP;
                image: "volume_led_05.png" COMP;
                image: "volume_led_06.png" COMP;
                image: "volume_led_07.png" COMP;
                image: "volume_led_08.png" COMP;
                image: "volume_led_09.png" COMP;
                image: "volume_led_10.png" COMP;

                image: "volume_led_11.png" COMP;
                image: "volume_led_12.png" COMP;
                image: "volume_led_13.png" COMP;
                image: "volume_led_14.png" COMP;
                image: "volume_led_15.png" COMP;
                image: "volume_led_16.png" COMP;
                image: "volume_led_17.png" COMP;
                image: "volume_led_18.png" COMP;
                image: "volume_led_19.png" COMP;
                image: "volume_led_20.png" COMP;

                image: "volume_led_21.png" COMP;
                image: "volume_led_22.png" COMP;
                image: "volume_led_23.png" COMP;
                image: "volume_led_24.png" COMP;
                image: "volume_led_25.png" COMP;
                image: "volume_led_26.png" COMP;
                image: "volume_led_27.png" COMP;
                image: "volume_led_28.png" COMP;
                image: "volume_led_29.png" COMP;
                image: "volume_led_30.png" COMP;

                image: "volume_led_31.png" COMP;
                image: "volume_led_32.png" COMP;
                image: "volume_led_33.png" COMP;
                image: "volume_led_34.png" COMP;
                image: "volume_led_35.png" COMP;
                image: "volume_led_36.png" COMP;
                image: "volume_led_37.png" COMP;
                image: "volume_led_38.png" COMP;
                image: "volume_led_39.png" COMP;
                image: "volume_led_40.png" COMP;

                image: "volume_led_41.png" COMP;
                image: "volume_led_42.png" COMP;
                image: "volume_led_43.png" COMP;
                image: "volume_led_44.png" COMP;
                image: "volume_led_45.png" COMP;
        }

        script
        {
                //#define VOLUME_MIN_ANGLE  42.0
                #define VOLUME_MIN_ANGLE  0.0
                #define VOLUME_MAX_ANGLE  264.0
                #define VOLUME_MAX_LEDS   45
                
                public knob_angle;
                public knob_offset;
                public leds_on;

                public led_status; //edje list to keep track of each led status
                
                public Float:calc_angle(mx, my)
                {
                        new px, py, pw, ph;
                        get_geometry(PART:"bg", px, py, pw, ph);

                        new center_x, center_y;
                        center_x = px + pw / 2;
                        center_y = py + ph / 2;

                        new dx, dy;
                        dx = center_x - mx;
                        dy = center_y - my;

                        new Float:angle;
                        angle = atan2(-dx, dy) * 180.0 / PI + 180.0;

                        return angle;
                }

                public rotate_knob(Float:val)
                {
                        custom_state(PART:"knob", "default", 0.0);
                        set_state_val(PART:"knob", STATE_MAP_ROT_Z, val);
                        set_state(PART:"knob", "custom", 0.0);

                        //set needed leds on or off from current value
                        set_int(leds_on, round(val * VOLUME_MAX_LEDS / VOLUME_MAX_ANGLE));
                        emit("leds,changed", "volume");
                }
        }

        parts
        {
                part
                {
                        name: "bg";
                        type: RECT;
                        description
                        {
                                state: "default" 0.0;
                                visible: 0;
                                rel1.to: "leds_off";
                                rel2.to: "leds_off";
                        }
                }

                part
                {
                        name: "knob_back";
                        mouse_events: 0;
                        description
                        {
                                state: "default" 0.0;
                                rel1 { relative: 0.5  0.5; offset: -100 -100; }
                                rel2 { relative: 0.5  0.5; offset: 99 99; }
                                image.normal: "volume_knob.png";
                        }
                }
                
                part
                {
                        name: "knob";
                        mouse_events: 0;
                        description
                        {
                                state: "default" 0.0;
                                rel1 { relative: 0.5  0.5; offset: -100 -100; }
                                rel2 { relative: 0.5  0.5; offset: 99 99; }
                                image.normal: "volume_knob_move.png";
                                map.on: 1;
                        }
                }

                part
                {
                        name: "leds_off";
                        mouse_events: 0;
                        description
                        {
                                state: "default" 0.0;
                                rel1 { relative: 0.5  0.5; offset: -100 -100; }
                                rel2 { relative: 0.5  0.5; offset: 99 99; }
                                image.normal: "volume_knob_ledsoff.png";
                                color: 255 255 255 50;
                        }
                }

#define VOLUME_LED_ON(num, inum) \
                part \
                { \
                        name: "led_"num; \
                        mouse_events: 0; \
                        description \
                        { \
                                state: "default" 0.0; \
                                rel1.to: "leds_off"; \
                                rel2.to: "leds_off"; \
                                image.normal: "volume_led_"num".png"; \
                                visible: 0; \
                                color: 255 255 255 0; \
                        } \
                        description \
                        { \
                                state: "visible" 0.0; \
                                inherit: "default" 0.0; \
                                visible: 1; \
                                color: 255 255 255 255; \
                        } \
                } \
                program \
                { \
                        name: "show_led_"num; \
                        action: STATE_SET "visible" 0.0; \
                        transition: DECELERATE 0.6 CURRENT; \
                        target: "led_"num; \
                } \
                program \
                { \
                        name: "hide_led_"num; \
                        action: STATE_SET "default" 0.0; \
                        transition: DECELERATE 0.6 CURRENT; \
                        target: "led_"num; \
                } \
                program \
                { \
                        name: "sig_led_changed_"num; \
                        signal: "leds,changed"; \
                        source: "volume"; \
                        script \
                        { \
                                new current_status = fetch_int(led_status, inum - 1); \
                                new new_status; \
                                if (get_int(leds_on) >= inum) \
                                        new_status = 1; \
                                else \
                                        new_status = 0; \
                                \
                                if (current_status != new_status) \
                                { \
                                        if (new_status == 1) \
                                                run_program(PROGRAM:"show_led_"num); \
                                        else if (new_status == 0) \
                                                run_program(PROGRAM:"hide_led_"num); \
                                        \
                                        replace_int(led_status, inum - 1, new_status); \
                                } \
                        } \
                }

                VOLUME_LED_ON("01", 1)
                VOLUME_LED_ON("02", 2)
                VOLUME_LED_ON("03", 3)
                VOLUME_LED_ON("04", 4)
                VOLUME_LED_ON("05", 5)
                VOLUME_LED_ON("06", 6)
                VOLUME_LED_ON("07", 7)
                VOLUME_LED_ON("08", 8)
                VOLUME_LED_ON("09", 9)
                VOLUME_LED_ON("10", 10)

                VOLUME_LED_ON("11", 11)
                VOLUME_LED_ON("12", 12)
                VOLUME_LED_ON("13", 13)
                VOLUME_LED_ON("14", 14)
                VOLUME_LED_ON("15", 15)
                VOLUME_LED_ON("16", 16)
                VOLUME_LED_ON("17", 17)
                VOLUME_LED_ON("18", 18)
                VOLUME_LED_ON("19", 19)
                VOLUME_LED_ON("20", 20)

                VOLUME_LED_ON("21", 21)
                VOLUME_LED_ON("22", 22)
                VOLUME_LED_ON("23", 23)
                VOLUME_LED_ON("24", 24)
                VOLUME_LED_ON("25", 25)
                VOLUME_LED_ON("26", 26)
                VOLUME_LED_ON("27", 27)
                VOLUME_LED_ON("28", 28)
                VOLUME_LED_ON("29", 29)
                VOLUME_LED_ON("30", 30)

                VOLUME_LED_ON("31", 31)
                VOLUME_LED_ON("32", 32)
                VOLUME_LED_ON("33", 33)
                VOLUME_LED_ON("34", 34)
                VOLUME_LED_ON("35", 35)
                VOLUME_LED_ON("36", 36)
                VOLUME_LED_ON("37", 37)
                VOLUME_LED_ON("38", 38)
                VOLUME_LED_ON("39", 39)
                VOLUME_LED_ON("40", 40)

                VOLUME_LED_ON("41", 41)
                VOLUME_LED_ON("42", 42)
                VOLUME_LED_ON("43", 43)
                VOLUME_LED_ON("44", 44)
                VOLUME_LED_ON("45", 45)

                part
                {
                        name: "volume_min";
                        type: TEXT;
                        description
                        {
                                state: "default" 0.0;
                                fixed: 1 1;
                                rel1 { relative: 0.5 0.5; offset: -67 61; }
                                rel2 { relative: 0.5 0.5; offset: -1 82; }
                                color: 231 231 231 204;
                                text { text: "Min"; font: "CalaosContent"; size: 14; min: 1 1; align: 0.0 0.5; ellipsis: -1.0; }
                        }
                }

                part
                {
                        name: "volume_max";
                        type: TEXT;
                        description
                        {
                                state: "default" 0.0;
                                fixed: 1 1;
                                rel1 { relative: 0.5 0.5; offset: -1 61; }
                                rel2 { relative: 0.5 0.5; offset: 68 82; }
                                color: 231 231 231 204;
                                text { text: "Max"; font: "CalaosContent"; size: 14; min: 1 1; align: 1.0 0.5; ellipsis: -1.0; }
                        }
                }

                part
                {
                        name: "event";
                        type: RECT;
                        description
                        {
                                state: "default" 0.0;
                                rel1.to: "knob";
                                rel2.to: "knob";
                                color: 0 0 0 0;
                                
                        }
                        dragable
                        {
                                x: 1 1 0;
                                y: 1 1 0;
                        }
                }

                part
                {
                        //The real slider for elm_slider
                        name: "elm.dragable.slider";
                        type: RECT;
                        description
                        {
                                state: "default" 0.0;
                                visible: 0;

                        }
                        dragable
                        {
                                x: 1 1 0;
                                y: 0 0 0;
                        }
                }

        }

        programs
        {
                program
                {
                        name: "on_drag_start";
                        signal: "drag,start";
                        source: "event";
                        script
                        {
                                new mx, my;
                                get_mouse(mx, my);

                                set_float(knob_offset, calc_angle(mx, my) - get_float(knob_angle));
                        }
                }
                
                program
                {
                        name: "on_drag_move";
                        signal: "drag";
                        source: "event";
                        script
                        {
                                new mx, my;
                                get_mouse(mx, my);

                                new Float:angle = calc_angle(mx, my) - get_float(knob_offset);

                                //Limits the button range
                                if (angle < VOLUME_MIN_ANGLE) angle = VOLUME_MIN_ANGLE;
                                if (angle > VOLUME_MAX_ANGLE) angle = VOLUME_MAX_ANGLE;
                                
                                set_float(knob_angle, angle);
                                
                                rotate_knob(angle);
                                set_drag(PART:"elm.dragable.slider",
                                         get_float(knob_angle) / VOLUME_MAX_ANGLE, 0.0);
                        }
                }


                program
                {
                        name: "on_drag_stop";
                        signal: "drag,stop";
                        source: "event";
                        script
                        {
                                set_drag(PART:"event", 0.0, 0.0);
                        }
                }

                program
                {
                        name: "on_slider_set";
                        signal: "drag,set";
                        source: "elm.dragable.slider";
                        script
                        {
                                new Float:dx, Float:dy;
                                get_drag(PART:"elm.dragable.slider", dx, dy);
                                
                                new Float:angle = dx * VOLUME_MAX_ANGLE;
                                set_float(knob_angle, angle);
                                
                                rotate_knob(angle);
                        }
                }

                program
                {
                        name: "on_init";
                        signal: "show";
                        script
                        {
                                while (count(led_status) < VOLUME_MAX_LEDS)
                                        append_int(led_status, 0);
                        }
                }
        }
}
